/*
 * Custody Services
 *
 * This API is part of the OpenWealth APIs for the connectivity between custody banks and WealthTechs (e.g. Portfolio Management Systems). This API allows the user to receive data from custody banks regarding accounts and positions. The API is designed to be used for either update end of day data batches or single near-realtime account/position information. Furthermore, this API allows the user to receive data from custody banks regarding transactions. In this version (2.0) only transactions which include effective cash or securities movements are in scope and corporate actions without any cash impact are delivered only on a informative basis. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: openwealth@synpulse.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using OpenWealth.Attributes;
using OpenWealth.Models;

namespace OpenWealth.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PositionsApiController : ControllerBase
    { 
        /// <summary>
        /// Returns the positions for a specific account
        /// </summary>
        /// <remarks>Returns all positions for a specific account. Paging is done based on the position object, i.e. if limit is set to 1, then 1 position will be returned per page. </remarks>
        /// <param name="accountId">Account ID parameter.</param>
        /// <param name="date">A date value.</param>
        /// <param name="xCorrelationID">Unique ID (defined by the caller) which will be reflected back in the response.</param>
        /// <param name="endOfDayIndicator">Indicates if the resources (positions &amp; transactions) have been confirmed by the end-of-day (eod) processing. - If the parameter is not set, all resources will be delivered. - If the parameter is set to true, only resources with with the particular property set to true will be delivered. - If the parameter is set to false, only resources with with the particular property set to false will be delivered. </param>
        /// <param name="cursor">An opaque string value used for pagination.</param>
        /// <param name="limit">Maximum number of items to return.</param>
        /// <response code="200">Position List</response>
        /// <response code="400">Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error as malformed request syntax. </response>
        /// <response code="401">Unauthorized - The request has not been applied because it lacks valid authentication credentials for the target resource.</response>
        /// <response code="403">Forbidden - The server understood the request but refuses to authorize it.</response>
        /// <response code="404">Not Found - The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. </response>
        /// <response code="405">Method Not Allowed - The method received in the request-line is known by the origin server but not supported by the target resource. </response>
        /// <response code="500">Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        /// <response code="501">Not Implemented - The server does not support the functionality required to fulfill the request.</response>
        /// <response code="503">Service Unavailable - The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.</response>
        [HttpGet]
        [Route("/accounts/{accountId}/positions")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<ValuatedPosition>))]
        [ProducesResponseType(statusCode: 400, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 405, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 501, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 503, type: typeof(CommonErrorResponse))]
        public virtual IActionResult GetAccountPositionByAccountId([FromRoute (Name = "accountId")][Required] [MaxLength(128)]string accountId, [FromQuery (Name = "date")][Required()]DateOnly date, [FromHeader (Name = "X-Correlation-ID")][Required()]string xCorrelationID, [FromQuery (Name = "end_of_day_indicator")]bool? endOfDayIndicator, [FromQuery (Name = "cursor")]string? cursor, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ValuatedPosition>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 501 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(501, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(CommonErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"costForeignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"value\" : 0.98\n  },\n  \"quantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"valuation\" : {\n    \"valueInPositionCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valueInReferenceCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valuationDate\" : \"2018-04-13\"\n  },\n  \"numberOfDaysAccrued\" : 34,\n  \"price\" : {\n    \"priceDate\" : \"\",\n    \"sourceOfPrice\" : \"SIX Swiss Exchange\",\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"positionDate\" : \"2018-04-13\",\n  \"blockedQuantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"endOfDayIndicator\" : true,\n  \"costPrice\" : {\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"foreignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"rateDate\" : \"\",\n    \"value\" : 0.98,\n    \"sourceOfRate\" : \"Reuters 4 o'clock\"\n  },\n  \"accruedInterest\" : {\n    \"amount\" : 12000,\n    \"currency\" : \"CHF\"\n  }\n}, {\n  \"costForeignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"value\" : 0.98\n  },\n  \"quantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"valuation\" : {\n    \"valueInPositionCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valueInReferenceCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valuationDate\" : \"2018-04-13\"\n  },\n  \"numberOfDaysAccrued\" : 34,\n  \"price\" : {\n    \"priceDate\" : \"\",\n    \"sourceOfPrice\" : \"SIX Swiss Exchange\",\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"positionDate\" : \"2018-04-13\",\n  \"blockedQuantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"endOfDayIndicator\" : true,\n  \"costPrice\" : {\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"foreignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"rateDate\" : \"\",\n    \"value\" : 0.98,\n    \"sourceOfRate\" : \"Reuters 4 o'clock\"\n  },\n  \"accruedInterest\" : {\n    \"amount\" : 12000,\n    \"currency\" : \"CHF\"\n  }\n} ]";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<List<ValuatedPosition>>(exampleJson)
            : default(List<ValuatedPosition>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a positions by id for a specific account
        /// </summary>
        /// <remarks>Returns a positions for a specific account.</remarks>
        /// <param name="accountId">Account ID parameter.</param>
        /// <param name="positionId">Position ID parameter.</param>
        /// <param name="xCorrelationID">Unique ID (defined by the caller) which will be reflected back in the response.</param>
        /// <param name="endOfDayIndicator">Indicates if the resources (positions &amp; transactions) have been confirmed by the end-of-day (eod) processing. - If the parameter is not set, all resources will be delivered. - If the parameter is set to true, only resources with with the particular property set to true will be delivered. - If the parameter is set to false, only resources with with the particular property set to false will be delivered. </param>
        /// <response code="200">Position</response>
        /// <response code="400">Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error as malformed request syntax. </response>
        /// <response code="401">Unauthorized - The request has not been applied because it lacks valid authentication credentials for the target resource.</response>
        /// <response code="403">Forbidden - The server understood the request but refuses to authorize it.</response>
        /// <response code="404">Not Found - The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. </response>
        /// <response code="405">Method Not Allowed - The method received in the request-line is known by the origin server but not supported by the target resource. </response>
        /// <response code="500">Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        /// <response code="501">Not Implemented - The server does not support the functionality required to fulfill the request.</response>
        /// <response code="503">Service Unavailable - The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.</response>
        [HttpGet]
        [Route("/accounts/{accountId}/positions/{positionId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ValuatedPosition))]
        [ProducesResponseType(statusCode: 400, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 405, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 501, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 503, type: typeof(CommonErrorResponse))]
        public virtual IActionResult GetAccountPositionById([FromRoute (Name = "accountId")][Required] [MaxLength(128)]string accountId, [FromRoute (Name = "positionId")][Required] [MaxLength(128)]string positionId, [FromHeader (Name = "X-Correlation-ID")][Required()]string xCorrelationID, [FromQuery (Name = "end_of_day_indicator")]bool? endOfDayIndicator)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ValuatedPosition));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 501 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(501, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(CommonErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"costForeignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"value\" : 0.98\n  },\n  \"quantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"valuation\" : {\n    \"valueInPositionCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valueInReferenceCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valuationDate\" : \"2018-04-13\"\n  },\n  \"numberOfDaysAccrued\" : 34,\n  \"price\" : {\n    \"priceDate\" : \"\",\n    \"sourceOfPrice\" : \"SIX Swiss Exchange\",\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"positionDate\" : \"2018-04-13\",\n  \"blockedQuantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"endOfDayIndicator\" : true,\n  \"costPrice\" : {\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"foreignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"rateDate\" : \"\",\n    \"value\" : 0.98,\n    \"sourceOfRate\" : \"Reuters 4 o'clock\"\n  },\n  \"accruedInterest\" : {\n    \"amount\" : 12000,\n    \"currency\" : \"CHF\"\n  }\n}";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ValuatedPosition>(exampleJson)
            : default(ValuatedPosition);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns the positions for a specific customer
        /// </summary>
        /// <remarks>Returns all positions for a specific customer. Paging is done based on the position object, i.e. if limit is set to 1, then 1 position will be returned per page. </remarks>
        /// <param name="customerId">Customer ID Parameter.</param>
        /// <param name="date">A date value.</param>
        /// <param name="xCorrelationID">Unique ID (defined by the caller) which will be reflected back in the response.</param>
        /// <param name="endOfDayIndicator">Indicates if the resources (positions &amp; transactions) have been confirmed by the end-of-day (eod) processing. - If the parameter is not set, all resources will be delivered. - If the parameter is set to true, only resources with with the particular property set to true will be delivered. - If the parameter is set to false, only resources with with the particular property set to false will be delivered. </param>
        /// <param name="cursor">An opaque string value used for pagination.</param>
        /// <param name="limit">Maximum number of items to return.</param>
        /// <response code="200">Position List</response>
        /// <response code="400">Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error as malformed request syntax. </response>
        /// <response code="401">Unauthorized - The request has not been applied because it lacks valid authentication credentials for the target resource.</response>
        /// <response code="403">Forbidden - The server understood the request but refuses to authorize it.</response>
        /// <response code="404">Not Found - The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. </response>
        /// <response code="405">Method Not Allowed - The method received in the request-line is known by the origin server but not supported by the target resource. </response>
        /// <response code="500">Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        /// <response code="501">Not Implemented - The server does not support the functionality required to fulfill the request.</response>
        /// <response code="503">Service Unavailable - The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.</response>
        [HttpGet]
        [Route("/customers/{customerId}/positions")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<ValuatedPosition>))]
        [ProducesResponseType(statusCode: 400, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 405, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 501, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 503, type: typeof(CommonErrorResponse))]
        public virtual IActionResult GetCustomerPositionByCustomerId([FromRoute (Name = "customerId")][Required][StringLength(128, MinimumLength=1)]string customerId, [FromQuery (Name = "date")][Required()]DateOnly date, [FromHeader (Name = "X-Correlation-ID")][Required()]string xCorrelationID, [FromQuery (Name = "end_of_day_indicator")]bool? endOfDayIndicator, [FromQuery (Name = "cursor")]string? cursor, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ValuatedPosition>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 501 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(501, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(CommonErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"costForeignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"value\" : 0.98\n  },\n  \"quantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"valuation\" : {\n    \"valueInPositionCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valueInReferenceCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valuationDate\" : \"2018-04-13\"\n  },\n  \"numberOfDaysAccrued\" : 34,\n  \"price\" : {\n    \"priceDate\" : \"\",\n    \"sourceOfPrice\" : \"SIX Swiss Exchange\",\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"positionDate\" : \"2018-04-13\",\n  \"blockedQuantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"endOfDayIndicator\" : true,\n  \"costPrice\" : {\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"foreignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"rateDate\" : \"\",\n    \"value\" : 0.98,\n    \"sourceOfRate\" : \"Reuters 4 o'clock\"\n  },\n  \"accruedInterest\" : {\n    \"amount\" : 12000,\n    \"currency\" : \"CHF\"\n  }\n}, {\n  \"costForeignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"value\" : 0.98\n  },\n  \"quantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"valuation\" : {\n    \"valueInPositionCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valueInReferenceCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valuationDate\" : \"2018-04-13\"\n  },\n  \"numberOfDaysAccrued\" : 34,\n  \"price\" : {\n    \"priceDate\" : \"\",\n    \"sourceOfPrice\" : \"SIX Swiss Exchange\",\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"positionDate\" : \"2018-04-13\",\n  \"blockedQuantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"endOfDayIndicator\" : true,\n  \"costPrice\" : {\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"foreignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"rateDate\" : \"\",\n    \"value\" : 0.98,\n    \"sourceOfRate\" : \"Reuters 4 o'clock\"\n  },\n  \"accruedInterest\" : {\n    \"amount\" : 12000,\n    \"currency\" : \"CHF\"\n  }\n} ]";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<List<ValuatedPosition>>(exampleJson)
            : default(List<ValuatedPosition>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a positions by id for a specific customer
        /// </summary>
        /// <remarks>Returns a positions for a specific customer.</remarks>
        /// <param name="customerId">Customer ID Parameter.</param>
        /// <param name="positionId">Position ID parameter.</param>
        /// <param name="xCorrelationID">Unique ID (defined by the caller) which will be reflected back in the response.</param>
        /// <param name="endOfDayIndicator">Indicates if the resources (positions &amp; transactions) have been confirmed by the end-of-day (eod) processing. - If the parameter is not set, all resources will be delivered. - If the parameter is set to true, only resources with with the particular property set to true will be delivered. - If the parameter is set to false, only resources with with the particular property set to false will be delivered. </param>
        /// <response code="200">Position</response>
        /// <response code="400">Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error as malformed request syntax. </response>
        /// <response code="401">Unauthorized - The request has not been applied because it lacks valid authentication credentials for the target resource.</response>
        /// <response code="403">Forbidden - The server understood the request but refuses to authorize it.</response>
        /// <response code="404">Not Found - The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. </response>
        /// <response code="405">Method Not Allowed - The method received in the request-line is known by the origin server but not supported by the target resource. </response>
        /// <response code="500">Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        /// <response code="501">Not Implemented - The server does not support the functionality required to fulfill the request.</response>
        /// <response code="503">Service Unavailable - The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.</response>
        [HttpGet]
        [Route("/customers/{customerId}/positions/{positionId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ValuatedPosition))]
        [ProducesResponseType(statusCode: 400, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 405, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 501, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 503, type: typeof(CommonErrorResponse))]
        public virtual IActionResult GetCustomerPositionById([FromRoute (Name = "customerId")][Required][StringLength(128, MinimumLength=1)]string customerId, [FromRoute (Name = "positionId")][Required] [MaxLength(128)]string positionId, [FromHeader (Name = "X-Correlation-ID")][Required()]string xCorrelationID, [FromQuery (Name = "end_of_day_indicator")]bool? endOfDayIndicator)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ValuatedPosition));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 501 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(501, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(CommonErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"costForeignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"value\" : 0.98\n  },\n  \"quantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"valuation\" : {\n    \"valueInPositionCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valueInReferenceCurrency\" : {\n      \"amount\" : 12000,\n      \"currency\" : \"CHF\"\n    },\n    \"valuationDate\" : \"2018-04-13\"\n  },\n  \"numberOfDaysAccrued\" : 34,\n  \"price\" : {\n    \"priceDate\" : \"\",\n    \"sourceOfPrice\" : \"SIX Swiss Exchange\",\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"positionDate\" : \"2018-04-13\",\n  \"blockedQuantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  },\n  \"endOfDayIndicator\" : true,\n  \"costPrice\" : {\n    \"currency\" : \"CHF\",\n    \"type\" : \"percentage\",\n    \"value\" : 12000\n  },\n  \"foreignExchangeRate\" : {\n    \"targetCurrency\" : \"CHF\",\n    \"sourceCurrency\" : \"CHF\",\n    \"rateDate\" : \"\",\n    \"value\" : 0.98,\n    \"sourceOfRate\" : \"Reuters 4 o'clock\"\n  },\n  \"accruedInterest\" : {\n    \"amount\" : 12000,\n    \"currency\" : \"CHF\"\n  }\n}";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ValuatedPosition>(exampleJson)
            : default(ValuatedPosition);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
