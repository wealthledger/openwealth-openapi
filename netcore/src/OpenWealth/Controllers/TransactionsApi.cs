/*
 * Custody Services
 *
 * This API is part of the OpenWealth APIs for the connectivity between custody banks and WealthTechs (e.g. Portfolio Management Systems). This API allows the user to receive data from custody banks regarding accounts and positions. The API is designed to be used for either update end of day data batches or single near-realtime account/position information. Furthermore, this API allows the user to receive data from custody banks regarding transactions. In this version (2.0) only transactions which include effective cash or securities movements are in scope and corporate actions without any cash impact are delivered only on a informative basis. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: openwealth@synpulse.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using OpenWealth.Attributes;
using OpenWealth.Models;

namespace OpenWealth.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TransactionsApiController : ControllerBase
    { 
        /// <summary>
        /// Returns a transactions for a specific customer
        /// </summary>
        /// <remarks>Returns all transactions for the a specific customer. Paging is done based on the transaction object, i.e. if limit is set to 1, then 1 transaction will be returned per page. </remarks>
        /// <param name="customerId">Customer ID Parameter.</param>
        /// <param name="date">A date value.</param>
        /// <param name="xCorrelationID">Unique ID (defined by the caller) which will be reflected back in the response.</param>
        /// <param name="endOfDayIndicator">Indicates if the resources (positions &amp; transactions) have been confirmed by the end-of-day (eod) processing. - If the parameter is not set, all resources will be delivered. - If the parameter is set to true, only resources with with the particular property set to true will be delivered. - If the parameter is set to false, only resources with with the particular property set to false will be delivered. </param>
        /// <param name="cursor">An opaque string value used for pagination.</param>
        /// <param name="limit">Maximum number of items to return.</param>
        /// <response code="200">Returns a transaction list for a specific customer.</response>
        /// <response code="400">Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error as malformed request syntax. </response>
        /// <response code="401">Unauthorized - The request has not been applied because it lacks valid authentication credentials for the target resource.</response>
        /// <response code="403">Forbidden - The server understood the request but refuses to authorize it.</response>
        /// <response code="404">Not Found - The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. </response>
        /// <response code="405">Method Not Allowed - The method received in the request-line is known by the origin server but not supported by the target resource. </response>
        /// <response code="500">Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        /// <response code="501">Not Implemented - The server does not support the functionality required to fulfill the request.</response>
        /// <response code="503">Service Unavailable - The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.</response>
        [HttpGet]
        [Route("/customers/{customerId}/transactions")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<Transaction>))]
        [ProducesResponseType(statusCode: 400, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 405, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 501, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 503, type: typeof(CommonErrorResponse))]
        public virtual IActionResult GetTransactionByCustomerId([FromRoute (Name = "customerId")][Required][StringLength(128, MinimumLength=1)]string customerId, [FromQuery (Name = "date")][Required()]DateOnly date, [FromHeader (Name = "X-Correlation-ID")][Required()]string xCorrelationID, [FromQuery (Name = "end_of_day_indicator")]bool? endOfDayIndicator, [FromQuery (Name = "cursor")]string? cursor, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Transaction>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 501 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(501, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(CommonErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"reversalIndicator\" : false,\n  \"placeOfTrade\" : {\n    \"marketDescription\" : \"OTC\",\n    \"marketIdentificationCode\" : \"XSWX\"\n  },\n  \"description\" : \"Buy 500 Apple Inc at 176 USD\",\n  \"triggeringFinancialInstrument\" : {\n    \"identificationList\" : [ {\n      \"identifier\" : \"CH0012005267\",\n      \"type\" : \"isin\"\n    }, {\n      \"identifier\" : \"CH0012005267\",\n      \"type\" : \"isin\"\n    } ],\n    \"name\" : \"Novartis AG\",\n    \"currencyOfDenomination\" : \"CHF\",\n    \"type\" : \"equity\",\n    \"factor\" : 0.85,\n    \"additionalDetails\" : \"Group contract number 129959961\",\n    \"cfiCode\" : \"ESVUFR\",\n    \"hasFactor\" : true\n  },\n  \"tradeDate\" : \"2018-04-13\",\n  \"settlementDate\" : \"2018-04-13\",\n  \"type\" : \"buy\",\n  \"transactionDate\" : \"2018-04-13\",\n  \"additionalDetails\" : \"Replaces transaction nr. 12234567489\",\n  \"postingAmountList\" : [ {\n    \"amount\" : 13023,\n    \"currency\" : \"CHF\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    }\n  }, {\n    \"amount\" : 13023,\n    \"currency\" : \"CHF\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    }\n  } ],\n  \"reference\" : \"XS12345678\",\n  \"reversedTransactionId\" : \"2134123-415\",\n  \"settlementCurrency\" : \"CHF\",\n  \"movementList\" : [ {\n    \"movementTypeAdditionalInformation\" : \"Fees for Reporting Service\",\n    \"quantity\" : {\n      \"type\" : \"unit\",\n      \"value\" : 12000\n    },\n    \"positionId\" : \"1234566-12-1\",\n    \"price\" : {\n      \"currency\" : \"CHF\",\n      \"type\" : \"percentage\",\n      \"value\" : 12000\n    },\n    \"movementDate\" : \"2018-04-13\",\n    \"foreignExchangeRate\" : {\n      \"targetCurrency\" : \"CHF\",\n      \"sourceCurrency\" : \"CHF\",\n      \"value\" : 0.98\n    },\n    \"valueDate\" : \"2018-04-13\",\n    \"type\" : \"cash\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    },\n    \"positionCurrency\" : \"CHF\"\n  }, {\n    \"movementTypeAdditionalInformation\" : \"Fees for Reporting Service\",\n    \"quantity\" : {\n      \"type\" : \"unit\",\n      \"value\" : 12000\n    },\n    \"positionId\" : \"1234566-12-1\",\n    \"price\" : {\n      \"currency\" : \"CHF\",\n      \"type\" : \"percentage\",\n      \"value\" : 12000\n    },\n    \"movementDate\" : \"2018-04-13\",\n    \"foreignExchangeRate\" : {\n      \"targetCurrency\" : \"CHF\",\n      \"sourceCurrency\" : \"CHF\",\n      \"value\" : 0.98\n    },\n    \"valueDate\" : \"2018-04-13\",\n    \"type\" : \"cash\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    },\n    \"positionCurrency\" : \"CHF\"\n  } ],\n  \"customerId\" : \"12345-6\",\n  \"endOfDayIndicator\" : true,\n  \"id\" : \"9876-54321\",\n  \"triggeringQuantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  }\n}, {\n  \"reversalIndicator\" : false,\n  \"placeOfTrade\" : {\n    \"marketDescription\" : \"OTC\",\n    \"marketIdentificationCode\" : \"XSWX\"\n  },\n  \"description\" : \"Buy 500 Apple Inc at 176 USD\",\n  \"triggeringFinancialInstrument\" : {\n    \"identificationList\" : [ {\n      \"identifier\" : \"CH0012005267\",\n      \"type\" : \"isin\"\n    }, {\n      \"identifier\" : \"CH0012005267\",\n      \"type\" : \"isin\"\n    } ],\n    \"name\" : \"Novartis AG\",\n    \"currencyOfDenomination\" : \"CHF\",\n    \"type\" : \"equity\",\n    \"factor\" : 0.85,\n    \"additionalDetails\" : \"Group contract number 129959961\",\n    \"cfiCode\" : \"ESVUFR\",\n    \"hasFactor\" : true\n  },\n  \"tradeDate\" : \"2018-04-13\",\n  \"settlementDate\" : \"2018-04-13\",\n  \"type\" : \"buy\",\n  \"transactionDate\" : \"2018-04-13\",\n  \"additionalDetails\" : \"Replaces transaction nr. 12234567489\",\n  \"postingAmountList\" : [ {\n    \"amount\" : 13023,\n    \"currency\" : \"CHF\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    }\n  }, {\n    \"amount\" : 13023,\n    \"currency\" : \"CHF\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    }\n  } ],\n  \"reference\" : \"XS12345678\",\n  \"reversedTransactionId\" : \"2134123-415\",\n  \"settlementCurrency\" : \"CHF\",\n  \"movementList\" : [ {\n    \"movementTypeAdditionalInformation\" : \"Fees for Reporting Service\",\n    \"quantity\" : {\n      \"type\" : \"unit\",\n      \"value\" : 12000\n    },\n    \"positionId\" : \"1234566-12-1\",\n    \"price\" : {\n      \"currency\" : \"CHF\",\n      \"type\" : \"percentage\",\n      \"value\" : 12000\n    },\n    \"movementDate\" : \"2018-04-13\",\n    \"foreignExchangeRate\" : {\n      \"targetCurrency\" : \"CHF\",\n      \"sourceCurrency\" : \"CHF\",\n      \"value\" : 0.98\n    },\n    \"valueDate\" : \"2018-04-13\",\n    \"type\" : \"cash\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    },\n    \"positionCurrency\" : \"CHF\"\n  }, {\n    \"movementTypeAdditionalInformation\" : \"Fees for Reporting Service\",\n    \"quantity\" : {\n      \"type\" : \"unit\",\n      \"value\" : 12000\n    },\n    \"positionId\" : \"1234566-12-1\",\n    \"price\" : {\n      \"currency\" : \"CHF\",\n      \"type\" : \"percentage\",\n      \"value\" : 12000\n    },\n    \"movementDate\" : \"2018-04-13\",\n    \"foreignExchangeRate\" : {\n      \"targetCurrency\" : \"CHF\",\n      \"sourceCurrency\" : \"CHF\",\n      \"value\" : 0.98\n    },\n    \"valueDate\" : \"2018-04-13\",\n    \"type\" : \"cash\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    },\n    \"positionCurrency\" : \"CHF\"\n  } ],\n  \"customerId\" : \"12345-6\",\n  \"endOfDayIndicator\" : true,\n  \"id\" : \"9876-54321\",\n  \"triggeringQuantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  }\n} ]";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<List<Transaction>>(exampleJson)
            : default(List<Transaction>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a transaction for a specific customer
        /// </summary>
        /// <remarks>Returns a transaction instance by id.</remarks>
        /// <param name="customerId">Customer ID Parameter.</param>
        /// <param name="transactionId">Transaction ID.</param>
        /// <param name="xCorrelationID">Unique ID (defined by the caller) which will be reflected back in the response.</param>
        /// <response code="200">Returns a transaction list for a specific customer.</response>
        /// <response code="400">Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error as malformed request syntax. </response>
        /// <response code="401">Unauthorized - The request has not been applied because it lacks valid authentication credentials for the target resource.</response>
        /// <response code="403">Forbidden - The server understood the request but refuses to authorize it.</response>
        /// <response code="404">Not Found - The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. </response>
        /// <response code="405">Method Not Allowed - The method received in the request-line is known by the origin server but not supported by the target resource. </response>
        /// <response code="500">Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        /// <response code="501">Not Implemented - The server does not support the functionality required to fulfill the request.</response>
        /// <response code="503">Service Unavailable - The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.</response>
        [HttpGet]
        [Route("/customers/{customerId}/transactions/{transactionId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Transaction))]
        [ProducesResponseType(statusCode: 400, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 405, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 501, type: typeof(CommonErrorResponse))]
        [ProducesResponseType(statusCode: 503, type: typeof(CommonErrorResponse))]
        public virtual IActionResult GetTransactionByTransactionId([FromRoute (Name = "customerId")][Required][StringLength(128, MinimumLength=1)]string customerId, [FromRoute (Name = "transactionId")][Required] [MaxLength(128)]string transactionId, [FromHeader (Name = "X-Correlation-ID")][Required()]string xCorrelationID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Transaction));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 501 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(501, default(CommonErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(CommonErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"reversalIndicator\" : false,\n  \"placeOfTrade\" : {\n    \"marketDescription\" : \"OTC\",\n    \"marketIdentificationCode\" : \"XSWX\"\n  },\n  \"description\" : \"Buy 500 Apple Inc at 176 USD\",\n  \"triggeringFinancialInstrument\" : {\n    \"identificationList\" : [ {\n      \"identifier\" : \"CH0012005267\",\n      \"type\" : \"isin\"\n    }, {\n      \"identifier\" : \"CH0012005267\",\n      \"type\" : \"isin\"\n    } ],\n    \"name\" : \"Novartis AG\",\n    \"currencyOfDenomination\" : \"CHF\",\n    \"type\" : \"equity\",\n    \"factor\" : 0.85,\n    \"additionalDetails\" : \"Group contract number 129959961\",\n    \"cfiCode\" : \"ESVUFR\",\n    \"hasFactor\" : true\n  },\n  \"tradeDate\" : \"2018-04-13\",\n  \"settlementDate\" : \"2018-04-13\",\n  \"type\" : \"buy\",\n  \"transactionDate\" : \"2018-04-13\",\n  \"additionalDetails\" : \"Replaces transaction nr. 12234567489\",\n  \"postingAmountList\" : [ {\n    \"amount\" : 13023,\n    \"currency\" : \"CHF\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    }\n  }, {\n    \"amount\" : 13023,\n    \"currency\" : \"CHF\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    }\n  } ],\n  \"reference\" : \"XS12345678\",\n  \"reversedTransactionId\" : \"2134123-415\",\n  \"settlementCurrency\" : \"CHF\",\n  \"movementList\" : [ {\n    \"movementTypeAdditionalInformation\" : \"Fees for Reporting Service\",\n    \"quantity\" : {\n      \"type\" : \"unit\",\n      \"value\" : 12000\n    },\n    \"positionId\" : \"1234566-12-1\",\n    \"price\" : {\n      \"currency\" : \"CHF\",\n      \"type\" : \"percentage\",\n      \"value\" : 12000\n    },\n    \"movementDate\" : \"2018-04-13\",\n    \"foreignExchangeRate\" : {\n      \"targetCurrency\" : \"CHF\",\n      \"sourceCurrency\" : \"CHF\",\n      \"value\" : 0.98\n    },\n    \"valueDate\" : \"2018-04-13\",\n    \"type\" : \"cash\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    },\n    \"positionCurrency\" : \"CHF\"\n  }, {\n    \"movementTypeAdditionalInformation\" : \"Fees for Reporting Service\",\n    \"quantity\" : {\n      \"type\" : \"unit\",\n      \"value\" : 12000\n    },\n    \"positionId\" : \"1234566-12-1\",\n    \"price\" : {\n      \"currency\" : \"CHF\",\n      \"type\" : \"percentage\",\n      \"value\" : 12000\n    },\n    \"movementDate\" : \"2018-04-13\",\n    \"foreignExchangeRate\" : {\n      \"targetCurrency\" : \"CHF\",\n      \"sourceCurrency\" : \"CHF\",\n      \"value\" : 0.98\n    },\n    \"valueDate\" : \"2018-04-13\",\n    \"type\" : \"cash\",\n    \"account\" : {\n      \"portfolioInformation\" : {\n        \"identification\" : \"87654-3219\",\n        \"referenceCurrency\" : \"CHF\"\n      },\n      \"referenceCurrency\" : \"CHF\",\n      \"iban\" : \"CH123456789\",\n      \"name\" : \"Household account\",\n      \"id\" : \"8765432-19\",\n      \"designation\" : \"Current Account CHF\",\n      \"type\" : \"cashAccount\"\n    },\n    \"positionCurrency\" : \"CHF\"\n  } ],\n  \"customerId\" : \"12345-6\",\n  \"endOfDayIndicator\" : true,\n  \"id\" : \"9876-54321\",\n  \"triggeringQuantity\" : {\n    \"type\" : \"unit\",\n    \"value\" : 12000\n  }\n}";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            exampleJson = "Custom MIME type example not yet supported: application/problem+json";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Transaction>(exampleJson)
            : default(Transaction);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
