/*
 * Custody Services
 *
 * This API is part of the OpenWealth APIs for the connectivity between custody banks and WealthTechs (e.g. Portfolio Management Systems). This API allows the user to receive data from custody banks regarding accounts and positions. The API is designed to be used for either update end of day data batches or single near-realtime account/position information. Furthermore, this API allows the user to receive data from custody banks regarding transactions. In this version (2.0) only transactions which include effective cash or securities movements are in scope and corporate actions without any cash impact are delivered only on a informative basis. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: openwealth@synpulse.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using OpenWealth.Converters;

namespace OpenWealth.Models
{ 
    /// <summary>
    /// Transaction entity.
    /// </summary>
    [DataContract]
    public partial class Transaction : IEquatable<Transaction>
    {
        /// <summary>
        /// Transaction ID given by the bank.
        /// </summary>
        /// <value>Transaction ID given by the bank.</value>
        /// <example>9876-54321</example>
        [Required]
        [MaxLength(128)]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TransactionType Type { get; set; }

        /// <summary>
        /// Date according to ISO 8601.
        /// </summary>
        /// <value>Date according to ISO 8601.</value>
        /// <example>Fri Apr 13 02:00:00 CEST 2018</example>
        [Required]
        [DataMember(Name="transactionDate", EmitDefaultValue=true)]
        public DateOnly TransactionDate { get; set; }

        /// <summary>
        /// Unique and unambiguous identification used by the bank for the customer.
        /// </summary>
        /// <value>Unique and unambiguous identification used by the bank for the customer.</value>
        /// <example>12345-6</example>
        [Required]
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Indicates whether it is the reversal of a previously reported movement.
        /// </summary>
        /// <value>Indicates whether it is the reversal of a previously reported movement.</value>
        /// <example>false</example>
        [Required]
        [DataMember(Name="reversalIndicator", EmitDefaultValue=true)]
        public bool ReversalIndicator { get; set; } = false;

        /// <summary>
        /// Indicates if the transaction has been confirmed by the end-of-day (eod) processing.
        /// </summary>
        /// <value>Indicates if the transaction has been confirmed by the end-of-day (eod) processing.</value>
        /// <example>true</example>
        [Required]
        [DataMember(Name="endOfDayIndicator", EmitDefaultValue=true)]
        public bool EndOfDayIndicator { get; set; }

        /// <summary>
        /// Transaction reference as used in the transaction statement. This could be equal to the id of the transaction but may not if GUID are used to identify the transaction. 
        /// </summary>
        /// <value>Transaction reference as used in the transaction statement. This could be equal to the id of the transaction but may not if GUID are used to identify the transaction. </value>
        /// <example>XS12345678</example>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string? Reference { get; set; }

        /// <summary>
        /// Human readable description of the transaction. Often referred to as &#39;Buchungs-Text&#39; in german transaction statements.
        /// </summary>
        /// <value>Human readable description of the transaction. Often referred to as &#39;Buchungs-Text&#39; in german transaction statements.</value>
        /// <example>Buy 500 Apple Inc at 176 USD</example>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets PlaceOfTrade
        /// </summary>
        [DataMember(Name="placeOfTrade", EmitDefaultValue=false)]
        public PlaceOfTrade? PlaceOfTrade { get; set; }

        /// <summary>
        /// States the identification of the transaction that was reversed.
        /// </summary>
        /// <value>States the identification of the transaction that was reversed.</value>
        /// <example>2134123-415</example>
        [MaxLength(128)]
        [DataMember(Name="reversedTransactionId", EmitDefaultValue=false)]
        public string? ReversedTransactionId { get; set; }

        /// <summary>
        /// Date according to ISO 8601.
        /// </summary>
        /// <value>Date according to ISO 8601.</value>
        /// <example>Fri Apr 13 02:00:00 CEST 2018</example>
        [DataMember(Name="tradeDate", EmitDefaultValue=true)]
        public DateOnly? TradeDate { get; set; }

        /// <summary>
        /// Date according to ISO 8601.
        /// </summary>
        /// <value>Date according to ISO 8601.</value>
        /// <example>Fri Apr 13 02:00:00 CEST 2018</example>
        [DataMember(Name="settlementDate", EmitDefaultValue=true)]
        public DateOnly? SettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets TriggeringFinancialInstrument
        /// </summary>
        [DataMember(Name="triggeringFinancialInstrument", EmitDefaultValue=false)]
        public FinancialInstrument? TriggeringFinancialInstrument { get; set; }

        /// <summary>
        /// Gets or Sets TriggeringQuantity
        /// </summary>
        [DataMember(Name="triggeringQuantity", EmitDefaultValue=false)]
        public Quantity? TriggeringQuantity { get; set; }

        /// <summary>
        /// List of movements belonging to a transaction from a banks perspective.
        /// </summary>
        /// <value>List of movements belonging to a transaction from a banks perspective.</value>
        [DataMember(Name="movementList", EmitDefaultValue=false)]
        public List<Movement> MovementList { get; set; }

        /// <summary>
        /// List of total amounts of money that is to be/was posted to respective accounts in the account currency.
        /// </summary>
        /// <value>List of total amounts of money that is to be/was posted to respective accounts in the account currency.</value>
        [DataMember(Name="postingAmountList", EmitDefaultValue=false)]
        public List<PostingAmount> PostingAmountList { get; set; }

        /// <summary>
        /// ISO 4217 code.
        /// </summary>
        /// <value>ISO 4217 code.</value>
        /// <example>CHF</example>
        [RegularExpression("^[A-Z]{3}$")]
        [DataMember(Name="settlementCurrency", EmitDefaultValue=false)]
        public string? SettlementCurrency { get; set; }

        /// <summary>
        /// Provides additional details on the transaction which can not be included within the structured fields of the message.
        /// </summary>
        /// <value>Provides additional details on the transaction which can not be included within the structured fields of the message.</value>
        /// <example>Replaces transaction nr. 12234567489</example>
        [MaxLength(70)]
        [DataMember(Name="additionalDetails", EmitDefaultValue=false)]
        public string? AdditionalDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  ReversalIndicator: ").Append(ReversalIndicator).Append("\n");
            sb.Append("  EndOfDayIndicator: ").Append(EndOfDayIndicator).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PlaceOfTrade: ").Append(PlaceOfTrade).Append("\n");
            sb.Append("  ReversedTransactionId: ").Append(ReversedTransactionId).Append("\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  TriggeringFinancialInstrument: ").Append(TriggeringFinancialInstrument).Append("\n");
            sb.Append("  TriggeringQuantity: ").Append(TriggeringQuantity).Append("\n");
            sb.Append("  MovementList: ").Append(MovementList).Append("\n");
            sb.Append("  PostingAmountList: ").Append(PostingAmountList).Append("\n");
            sb.Append("  SettlementCurrency: ").Append(SettlementCurrency).Append("\n");
            sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Transaction)obj);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="other">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    TransactionDate == other.TransactionDate ||
                    
                    TransactionDate.Equals(other.TransactionDate)
                ) && 
                (
                    CustomerId == other.CustomerId ||
                    CustomerId != null &&
                    CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    ReversalIndicator == other.ReversalIndicator ||
                    
                    ReversalIndicator.Equals(other.ReversalIndicator)
                ) && 
                (
                    EndOfDayIndicator == other.EndOfDayIndicator ||
                    
                    EndOfDayIndicator.Equals(other.EndOfDayIndicator)
                ) && 
                (
                    Reference == other.Reference ||
                    Reference != null &&
                    Reference.Equals(other.Reference)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    PlaceOfTrade == other.PlaceOfTrade ||
                    PlaceOfTrade != null &&
                    PlaceOfTrade.Equals(other.PlaceOfTrade)
                ) && 
                (
                    ReversedTransactionId == other.ReversedTransactionId ||
                    ReversedTransactionId != null &&
                    ReversedTransactionId.Equals(other.ReversedTransactionId)
                ) && 
                (
                    TradeDate == other.TradeDate ||
                    
                    TradeDate.Equals(other.TradeDate)
                ) && 
                (
                    SettlementDate == other.SettlementDate ||
                    
                    SettlementDate.Equals(other.SettlementDate)
                ) && 
                (
                    TriggeringFinancialInstrument == other.TriggeringFinancialInstrument ||
                    TriggeringFinancialInstrument != null &&
                    TriggeringFinancialInstrument.Equals(other.TriggeringFinancialInstrument)
                ) && 
                (
                    TriggeringQuantity == other.TriggeringQuantity ||
                    TriggeringQuantity != null &&
                    TriggeringQuantity.Equals(other.TriggeringQuantity)
                ) && 
                (
                    MovementList == other.MovementList ||
                    MovementList != null &&
                    other.MovementList != null &&
                    MovementList.SequenceEqual(other.MovementList)
                ) && 
                (
                    PostingAmountList == other.PostingAmountList ||
                    PostingAmountList != null &&
                    other.PostingAmountList != null &&
                    PostingAmountList.SequenceEqual(other.PostingAmountList)
                ) && 
                (
                    SettlementCurrency == other.SettlementCurrency ||
                    SettlementCurrency != null &&
                    SettlementCurrency.Equals(other.SettlementCurrency)
                ) && 
                (
                    AdditionalDetails == other.AdditionalDetails ||
                    AdditionalDetails != null &&
                    AdditionalDetails.Equals(other.AdditionalDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + TransactionDate.GetHashCode();
                    if (CustomerId != null)
                    hashCode = hashCode * 59 + CustomerId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReversalIndicator.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndOfDayIndicator.GetHashCode();
                    if (Reference != null)
                    hashCode = hashCode * 59 + Reference.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (PlaceOfTrade != null)
                    hashCode = hashCode * 59 + PlaceOfTrade.GetHashCode();
                    if (ReversedTransactionId != null)
                    hashCode = hashCode * 59 + ReversedTransactionId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TradeDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + SettlementDate.GetHashCode();
                    if (TriggeringFinancialInstrument != null)
                    hashCode = hashCode * 59 + TriggeringFinancialInstrument.GetHashCode();
                    if (TriggeringQuantity != null)
                    hashCode = hashCode * 59 + TriggeringQuantity.GetHashCode();
                    if (MovementList != null)
                    hashCode = hashCode * 59 + MovementList.GetHashCode();
                    if (PostingAmountList != null)
                    hashCode = hashCode * 59 + PostingAmountList.GetHashCode();
                    if (SettlementCurrency != null)
                    hashCode = hashCode * 59 + SettlementCurrency.GetHashCode();
                    if (AdditionalDetails != null)
                    hashCode = hashCode * 59 + AdditionalDetails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Transaction left, Transaction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Transaction left, Transaction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
