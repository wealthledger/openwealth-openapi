/*
 * Custody Services
 *
 * This API is part of the OpenWealth APIs for the connectivity between custody banks and WealthTechs (e.g. Portfolio Management Systems). This API allows the user to receive data from custody banks regarding accounts and positions. The API is designed to be used for either update end of day data batches or single near-realtime account/position information. Furthermore, this API allows the user to receive data from custody banks regarding transactions. In this version (2.0) only transactions which include effective cash or securities movements are in scope and corporate actions without any cash impact are delivered only on a informative basis. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: openwealth@synpulse.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using OpenWealth.Converters;

namespace OpenWealth.Models
{
    /// <summary>
    /// Account entity.
    /// </summary>
    [DataContract]
    public partial class Account : IEquatable<Account>
    {
        /// <summary>
        /// Unique and unambiguous identification for the account. The IBAN should NOT be the account identifier.
        /// </summary>
        /// <value>Unique and unambiguous identification for the account. The IBAN should NOT be the account identifier.</value>
        /// <example>8765432-19</example>
        [Required]
        [MaxLength(128)]
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }


        /// <summary>
        /// Indicates the type of the account. If the account type is cashAccount, no information on the financial instrument is provided in the respective position in the account. 
        /// </summary>
        /// <value>Indicates the type of the account. If the account type is cashAccount, no information on the financial instrument is provided in the respective position in the account. </value>

        public enum TypeEnum
        {

            /// <summary>
            /// Enum CashAccount for cashAccount
            /// </summary>
            [EnumMember(Value = "cashAccount")]
            CashAccount = 1,

            /// <summary>
            /// Enum SafekeepingAccount for safekeepingAccount
            /// </summary>
            [EnumMember(Value = "safekeepingAccount")]
            SafekeepingAccount = 2,

            /// <summary>
            /// Enum Other for other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 3
        }

        /// <summary>
        /// Indicates the type of the account. If the account type is cashAccount, no information on the financial instrument is provided in the respective position in the account. 
        /// </summary>
        /// <value>Indicates the type of the account. If the account type is cashAccount, no information on the financial instrument is provided in the respective position in the account. </value>
        /// <example>cashAccount</example>
        [Required]
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Name of the account. It provides an additional means of identification, and is designated by the account servicer in agreement with the account owner. 
        /// </summary>
        /// <value>Name of the account. It provides an additional means of identification, and is designated by the account servicer in agreement with the account owner. </value>
        /// <example>Household account</example>
        [MaxLength(70)]
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string? Name { get; set; }

        /// <summary>
        /// ISO 4217 code.
        /// </summary>
        /// <value>ISO 4217 code.</value>
        /// <example>CHF</example>
        [Required]
        [RegularExpression("^[A-Z]{3}$")]
        [DataMember(Name = "referenceCurrency", EmitDefaultValue = false)]
        public string ReferenceCurrency { get; set; }

        /// <summary>
        /// Contains the accounts International Banking Account Number (IBAN) for a cashAccount if available.
        /// </summary>
        /// <value>Contains the accounts International Banking Account Number (IBAN) for a cashAccount if available.</value>
        /// <example>CH123456789</example>
        [MaxLength(34)]
        [DataMember(Name = "iban", EmitDefaultValue = false)]
        public string? Iban { get; set; }

        /// <summary>
        /// Supplementary information on the account. Designated by the account servicer.
        /// </summary>
        /// <value>Supplementary information on the account. Designated by the account servicer.</value>
        /// <example>Current Account CHF</example>
        [MaxLength(70)]
        [DataMember(Name = "designation", EmitDefaultValue = false)]
        public string? Designation { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioInformation
        /// </summary>
        [DataMember(Name = "portfolioInformation", EmitDefaultValue = false)]
        public PortfolioInformation? PortfolioInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReferenceCurrency: ").Append(ReferenceCurrency).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Designation: ").Append(Designation).Append("\n");
            sb.Append("  PortfolioInformation: ").Append(PortfolioInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Account)obj);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="other">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Type == other.Type ||

                    Type.Equals(other.Type)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    ReferenceCurrency == other.ReferenceCurrency ||
                    ReferenceCurrency != null &&
                    ReferenceCurrency.Equals(other.ReferenceCurrency)
                ) &&
                (
                    Iban == other.Iban ||
                    Iban != null &&
                    Iban.Equals(other.Iban)
                ) &&
                (
                    Designation == other.Designation ||
                    Designation != null &&
                    Designation.Equals(other.Designation)
                ) &&
                (
                    PortfolioInformation == other.PortfolioInformation ||
                    PortfolioInformation != null &&
                    PortfolioInformation.Equals(other.PortfolioInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();

                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (ReferenceCurrency != null)
                    hashCode = hashCode * 59 + ReferenceCurrency.GetHashCode();
                if (Iban != null)
                    hashCode = hashCode * 59 + Iban.GetHashCode();
                if (Designation != null)
                    hashCode = hashCode * 59 + Designation.GetHashCode();
                if (PortfolioInformation != null)
                    hashCode = hashCode * 59 + PortfolioInformation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Account left, Account right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Account left, Account right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
