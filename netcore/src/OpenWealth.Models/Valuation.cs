/*
 * Custody Services
 *
 * This API is part of the OpenWealth APIs for the connectivity between custody banks and WealthTechs (e.g. Portfolio Management Systems). This API allows the user to receive data from custody banks regarding accounts and positions. The API is designed to be used for either update end of day data batches or single near-realtime account/position information. Furthermore, this API allows the user to receive data from custody banks regarding transactions. In this version (2.0) only transactions which include effective cash or securities movements are in scope and corporate actions without any cash impact are delivered only on a informative basis. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: openwealth@synpulse.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using OpenWealth.Converters;

namespace OpenWealth.Models
{ 
    /// <summary>
    /// Detailed information about the valuation of a position.
    /// </summary>
    [DataContract]
    public partial class Valuation : IEquatable<Valuation>
    {
        /// <summary>
        /// Gets or Sets ValueInPositionCurrency
        /// </summary>
        [Required]
        [DataMember(Name="valueInPositionCurrency", EmitDefaultValue=false)]
        public CurrencyAmount ValueInPositionCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ValueInReferenceCurrency
        /// </summary>
        [DataMember(Name="valueInReferenceCurrency", EmitDefaultValue=false)]
        public CurrencyAmount? ValueInReferenceCurrency { get; set; }

        /// <summary>
        /// Date according to ISO 8601.
        /// </summary>
        /// <value>Date according to ISO 8601.</value>
        /// <example>Fri Apr 13 02:00:00 CEST 2018</example>
        [DataMember(Name="valuationDate", EmitDefaultValue=true)]
        public DateOnly? ValuationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Valuation {\n");
            sb.Append("  ValueInPositionCurrency: ").Append(ValueInPositionCurrency).Append("\n");
            sb.Append("  ValueInReferenceCurrency: ").Append(ValueInReferenceCurrency).Append("\n");
            sb.Append("  ValuationDate: ").Append(ValuationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Valuation)obj);
        }

        /// <summary>
        /// Returns true if Valuation instances are equal
        /// </summary>
        /// <param name="other">Instance of Valuation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Valuation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ValueInPositionCurrency == other.ValueInPositionCurrency ||
                    ValueInPositionCurrency != null &&
                    ValueInPositionCurrency.Equals(other.ValueInPositionCurrency)
                ) && 
                (
                    ValueInReferenceCurrency == other.ValueInReferenceCurrency ||
                    ValueInReferenceCurrency != null &&
                    ValueInReferenceCurrency.Equals(other.ValueInReferenceCurrency)
                ) && 
                (
                    ValuationDate == other.ValuationDate ||
                    
                    ValuationDate.Equals(other.ValuationDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ValueInPositionCurrency != null)
                    hashCode = hashCode * 59 + ValueInPositionCurrency.GetHashCode();
                    if (ValueInReferenceCurrency != null)
                    hashCode = hashCode * 59 + ValueInReferenceCurrency.GetHashCode();
                    
                    hashCode = hashCode * 59 + ValuationDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Valuation left, Valuation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Valuation left, Valuation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
