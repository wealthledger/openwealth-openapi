/*
 * Custody Services
 *
 * This API is part of the OpenWealth APIs for the connectivity between custody banks and WealthTechs (e.g. Portfolio Management Systems). This API allows the user to receive data from custody banks regarding accounts and positions. The API is designed to be used for either update end of day data batches or single near-realtime account/position information. Furthermore, this API allows the user to receive data from custody banks regarding transactions. In this version (2.0) only transactions which include effective cash or securities movements are in scope and corporate actions without any cash impact are delivered only on a informative basis. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: openwealth@synpulse.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using OpenWealth.Converters;

namespace OpenWealth.Models
{ 
    /// <summary>
    /// Describes a single movement/booking/flow within a transaction. Every transaction contains in the minimum one movement.
    /// </summary>
    [DataContract]
    public partial class Movement : IEquatable<Movement>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public MovementType Type { get; set; }

        /// <summary>
        /// Date according to ISO 8601.
        /// </summary>
        /// <value>Date according to ISO 8601.</value>
        /// <example>Fri Apr 13 02:00:00 CEST 2018</example>
        [Required]
        [DataMember(Name="movementDate", EmitDefaultValue=true)]
        public DateOnly MovementDate { get; set; }

        /// <summary>
        /// Gets or Sets FinancialInstrument
        /// </summary>
        [Required]
        [DataMember(Name="financialInstrument", EmitDefaultValue=false)]
        public FinancialInstrument FinancialInstrument { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [Required]
        [DataMember(Name="account", EmitDefaultValue=false)]
        public Account Account { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [Required]
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public Quantity Quantity { get; set; }

        /// <summary>
        /// Identification for the position given by the bank.
        /// </summary>
        /// <value>Identification for the position given by the bank.</value>
        /// <example>1234566-12-1</example>
        [Required]
        [MaxLength(128)]
        [DataMember(Name="positionId", EmitDefaultValue=false)]
        public string PositionId { get; set; }

        /// <summary>
        /// ISO 4217 code.
        /// </summary>
        /// <value>ISO 4217 code.</value>
        /// <example>CHF</example>
        [RegularExpression("^[A-Z]{3}$")]
        [DataMember(Name="positionCurrency", EmitDefaultValue=false)]
        public string? PositionCurrency { get; set; }

        /// <summary>
        /// Date according to ISO 8601.
        /// </summary>
        /// <value>Date according to ISO 8601.</value>
        /// <example>Fri Apr 13 02:00:00 CEST 2018</example>
        [DataMember(Name="valueDate", EmitDefaultValue=true)]
        public DateOnly? ValueDate { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Price? Price { get; set; }

        /// <summary>
        /// Gets or Sets ForeignExchangeRate
        /// </summary>
        [DataMember(Name="foreignExchangeRate", EmitDefaultValue=false)]
        public ForeignExchangeRate? ForeignExchangeRate { get; set; }

        /// <summary>
        /// Provides further details on an informative level, which goes beyond the granularity of the movementType.
        /// </summary>
        /// <value>Provides further details on an informative level, which goes beyond the granularity of the movementType.</value>
        /// <example>Fees for Reporting Service</example>
        [MaxLength(35)]
        [DataMember(Name="movementTypeAdditionalInformation", EmitDefaultValue=false)]
        public string? MovementTypeAdditionalInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Movement {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MovementDate: ").Append(MovementDate).Append("\n");
            sb.Append("  FinancialInstrument: ").Append(FinancialInstrument).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  PositionId: ").Append(PositionId).Append("\n");
            sb.Append("  PositionCurrency: ").Append(PositionCurrency).Append("\n");
            sb.Append("  ValueDate: ").Append(ValueDate).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ForeignExchangeRate: ").Append(ForeignExchangeRate).Append("\n");
            sb.Append("  MovementTypeAdditionalInformation: ").Append(MovementTypeAdditionalInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Movement)obj);
        }

        /// <summary>
        /// Returns true if Movement instances are equal
        /// </summary>
        /// <param name="other">Instance of Movement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Movement other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    MovementDate == other.MovementDate ||
                    
                    MovementDate.Equals(other.MovementDate)
                ) && 
                (
                    FinancialInstrument == other.FinancialInstrument ||
                    FinancialInstrument != null &&
                    FinancialInstrument.Equals(other.FinancialInstrument)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    PositionId == other.PositionId ||
                    PositionId != null &&
                    PositionId.Equals(other.PositionId)
                ) && 
                (
                    PositionCurrency == other.PositionCurrency ||
                    PositionCurrency != null &&
                    PositionCurrency.Equals(other.PositionCurrency)
                ) && 
                (
                    ValueDate == other.ValueDate ||
                    
                    ValueDate.Equals(other.ValueDate)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    ForeignExchangeRate == other.ForeignExchangeRate ||
                    ForeignExchangeRate != null &&
                    ForeignExchangeRate.Equals(other.ForeignExchangeRate)
                ) && 
                (
                    MovementTypeAdditionalInformation == other.MovementTypeAdditionalInformation ||
                    MovementTypeAdditionalInformation != null &&
                    MovementTypeAdditionalInformation.Equals(other.MovementTypeAdditionalInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + MovementDate.GetHashCode();
                    if (FinancialInstrument != null)
                    hashCode = hashCode * 59 + FinancialInstrument.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (PositionId != null)
                    hashCode = hashCode * 59 + PositionId.GetHashCode();
                    if (PositionCurrency != null)
                    hashCode = hashCode * 59 + PositionCurrency.GetHashCode();
                    
                    hashCode = hashCode * 59 + ValueDate.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (ForeignExchangeRate != null)
                    hashCode = hashCode * 59 + ForeignExchangeRate.GetHashCode();
                    if (MovementTypeAdditionalInformation != null)
                    hashCode = hashCode * 59 + MovementTypeAdditionalInformation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Movement left, Movement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Movement left, Movement right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
