/*
 * Custody Services
 *
 * This API is part of the OpenWealth APIs for the connectivity between custody banks and WealthTechs (e.g. Portfolio Management Systems). This API allows the user to receive data from custody banks regarding accounts and positions. The API is designed to be used for either update end of day data batches or single near-realtime account/position information. Furthermore, this API allows the user to receive data from custody banks regarding transactions. In this version (2.0) only transactions which include effective cash or securities movements are in scope and corporate actions without any cash impact are delivered only on a informative basis. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: openwealth@synpulse.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using OpenWealth.Converters;

namespace OpenWealth.Models
{
    /// <summary>
    /// Per annum ratio of interest received or paid to the principal amount of the contract for a specific period of time.
    /// </summary>
    [DataContract]
    public partial class InterestRate : IEquatable<InterestRate>
    {

        /// <summary>
        /// Indicates the type of interest, where - 'fixed' denotes a fixed interest rate for the agreed period. - 'variable' denotes a rate that fluctuates over time because it is based on an underlying benchmark ('basis') interest rate that changes periodically with the market. - 'staggered' denotes a rate that is set at different levels for different periods of time or different underlying principal amount. 
        /// </summary>
        /// <value>Indicates the type of interest, where - 'fixed' denotes a fixed interest rate for the agreed period. - 'variable' denotes a rate that fluctuates over time because it is based on an underlying benchmark ('basis') interest rate that changes periodically with the market. - 'staggered' denotes a rate that is set at different levels for different periods of time or different underlying principal amount. </value>

        public enum TypeEnum
        {

            /// <summary>
            /// Enum Fixed for fixed
            /// </summary>
            [EnumMember(Value = "fixed")]
            Fixed = 1,

            /// <summary>
            /// Enum Variable for variable
            /// </summary>
            [EnumMember(Value = "variable")]
            Variable = 2,

            /// <summary>
            /// Enum Staggered for staggered
            /// </summary>
            [EnumMember(Value = "staggered")]
            Staggered = 3
        }

        /// <summary>
        /// Indicates the type of interest, where - &#39;fixed&#39; denotes a fixed interest rate for the agreed period. - &#39;variable&#39; denotes a rate that fluctuates over time because it is based on an underlying benchmark (&#39;basis&#39;) interest rate that changes periodically with the market. - &#39;staggered&#39; denotes a rate that is set at different levels for different periods of time or different underlying principal amount. 
        /// </summary>
        /// <value>Indicates the type of interest, where - &#39;fixed&#39; denotes a fixed interest rate for the agreed period. - &#39;variable&#39; denotes a rate that fluctuates over time because it is based on an underlying benchmark (&#39;basis&#39;) interest rate that changes periodically with the market. - &#39;staggered&#39; denotes a rate that is set at different levels for different periods of time or different underlying principal amount. </value>
        /// <example>fixed</example>
        [Required]
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Current rate as decimal.
        /// </summary>
        /// <value>Current rate as decimal.</value>
        /// <example>0.00125</example>
        [Required]
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets DayCountBasis
        /// </summary>
        [DataMember(Name = "dayCountBasis", EmitDefaultValue = true)]
        public DayCountBasis DayCountBasis { get; set; }

        /// <summary>
        /// Date according to ISO 8601.
        /// </summary>
        /// <value>Date according to ISO 8601.</value>
        /// <example>Fri Apr 13 02:00:00 CEST 2018</example>
        [DataMember(Name = "paymentDate", EmitDefaultValue = true)]
        public DateOnly? PaymentDate { get; set; }


        /// <summary>
        /// Specifies the frequency of an interest payment.
        /// </summary>
        /// <value>Specifies the frequency of an interest payment.</value>

        public enum PaymentFrequencyEnum
        {

            /// <summary>
            /// Enum Annual for annual
            /// </summary>
            [EnumMember(Value = "annual")]
            Annual = 1,

            /// <summary>
            /// Enum Monthly for monthly
            /// </summary>
            [EnumMember(Value = "monthly")]
            Monthly = 2,

            /// <summary>
            /// Enum Quarterly for quarterly
            /// </summary>
            [EnumMember(Value = "quarterly")]
            Quarterly = 3,

            /// <summary>
            /// Enum SemiAnnual for semiAnnual
            /// </summary>
            [EnumMember(Value = "semiAnnual")]
            SemiAnnual = 4,

            /// <summary>
            /// Enum Weekly for weekly
            /// </summary>
            [EnumMember(Value = "weekly")]
            Weekly = 5,

            /// <summary>
            /// Enum AtMaturity for atMaturity
            /// </summary>
            [EnumMember(Value = "atMaturity")]
            AtMaturity = 6,

            /// <summary>
            /// Enum Other for other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 7
        }

        /// <summary>
        /// Specifies the frequency of an interest payment.
        /// </summary>
        /// <value>Specifies the frequency of an interest payment.</value>
        /// <example>quarterly</example>
        [DataMember(Name = "paymentFrequency", EmitDefaultValue = true)]
        public PaymentFrequencyEnum PaymentFrequency { get; set; }

        /// <summary>
        /// Benchmark by which floating rate will adjust in accordance with market conditions, such as LIBOR, EURIBOR.
        /// </summary>
        /// <value>Benchmark by which floating rate will adjust in accordance with market conditions, such as LIBOR, EURIBOR.</value>
        /// <example>LIBOR</example>
        [DataMember(Name = "basis", EmitDefaultValue = false)]
        public string? Basis { get; set; }

        /// <summary>
        /// The floating rate will be equal to the base rate (basis) plus the spread.
        /// </summary>
        /// <value>The floating rate will be equal to the base rate (basis) plus the spread.</value>
        /// <example>0.001</example>
        [DataMember(Name = "spread", EmitDefaultValue = true)]
        public decimal? Spread { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InterestRate {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DayCountBasis: ").Append(DayCountBasis).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  PaymentFrequency: ").Append(PaymentFrequency).Append("\n");
            sb.Append("  Basis: ").Append(Basis).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InterestRate)obj);
        }

        /// <summary>
        /// Returns true if InterestRate instances are equal
        /// </summary>
        /// <param name="other">Instance of InterestRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InterestRate other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Type == other.Type ||

                    Type.Equals(other.Type)
                ) &&
                (
                    Value == other.Value ||

                    Value.Equals(other.Value)
                ) &&
                (
                    DayCountBasis == other.DayCountBasis ||

                    DayCountBasis.Equals(other.DayCountBasis)
                ) &&
                (
                    PaymentDate == other.PaymentDate ||

                    PaymentDate.Equals(other.PaymentDate)
                ) &&
                (
                    PaymentFrequency == other.PaymentFrequency ||

                    PaymentFrequency.Equals(other.PaymentFrequency)
                ) &&
                (
                    Basis == other.Basis ||
                    Basis != null &&
                    Basis.Equals(other.Basis)
                ) &&
                (
                    Spread == other.Spread ||

                    Spread.Equals(other.Spread)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Type.GetHashCode();

                hashCode = hashCode * 59 + Value.GetHashCode();

                hashCode = hashCode * 59 + DayCountBasis.GetHashCode();

                hashCode = hashCode * 59 + PaymentDate.GetHashCode();

                hashCode = hashCode * 59 + PaymentFrequency.GetHashCode();
                if (Basis != null)
                    hashCode = hashCode * 59 + Basis.GetHashCode();

                hashCode = hashCode * 59 + Spread.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(InterestRate left, InterestRate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InterestRate left, InterestRate right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
