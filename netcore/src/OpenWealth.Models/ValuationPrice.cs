/*
 * Custody Services
 *
 * This API is part of the OpenWealth APIs for the connectivity between custody banks and WealthTechs (e.g. Portfolio Management Systems). This API allows the user to receive data from custody banks regarding accounts and positions. The API is designed to be used for either update end of day data batches or single near-realtime account/position information. Furthermore, this API allows the user to receive data from custody banks regarding transactions. In this version (2.0) only transactions which include effective cash or securities movements are in scope and corporate actions without any cash impact are delivered only on a informative basis. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: openwealth@synpulse.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using OpenWealth.Converters;

namespace OpenWealth.Models
{
    /// <summary>
    /// Price used for valuation purpose.
    /// </summary>
    [DataContract]
    public partial class ValuationPrice : IEquatable<ValuationPrice>
    {

        /// <summary>
        /// Indicates whether the price amount is depicted as actual currency amount per unit or as percentage.
        /// </summary>
        /// <value>Indicates whether the price amount is depicted as actual currency amount per unit or as percentage.</value>

        public enum TypeEnum
        {

            /// <summary>
            /// Enum Actual for actual
            /// </summary>
            [EnumMember(Value = "actual")]
            Actual = 1,

            /// <summary>
            /// Enum Percentage for percentage
            /// </summary>
            [EnumMember(Value = "percentage")]
            Percentage = 2
        }

        /// <summary>
        /// Indicates whether the price amount is depicted as actual currency amount per unit or as percentage.
        /// </summary>
        /// <value>Indicates whether the price amount is depicted as actual currency amount per unit or as percentage.</value>
        /// <example>percentage</example>
        [Required]
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Signed decimal number.
        /// </summary>
        /// <value>Signed decimal number.</value>
        /// <example>12000</example>
        [Required]
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public decimal Value { get; set; }

        /// <summary>
        /// ISO 4217 code.
        /// </summary>
        /// <value>ISO 4217 code.</value>
        /// <example>CHF</example>
        [RegularExpression("^[A-Z]{3}$")]
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string? Currency { get; set; }

        /// <summary>
        /// Date of the price.
        /// </summary>
        /// <value>Date of the price.</value>
        /// <example>Fri Apr 13 02:00:00 CEST 2018</example>
        [DataMember(Name = "priceDate", EmitDefaultValue = true)]
        public DateOnly? PriceDate { get; set; }

        /// <summary>
        /// Indicates the source of the (market)price.
        /// </summary>
        /// <value>Indicates the source of the (market)price.</value>
        /// <example>SIX Swiss Exchange</example>
        [MaxLength(70)]
        [DataMember(Name = "sourceOfPrice", EmitDefaultValue = false)]
        public string? SourceOfPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValuationPrice {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  PriceDate: ").Append(PriceDate).Append("\n");
            sb.Append("  SourceOfPrice: ").Append(SourceOfPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ValuationPrice)obj);
        }

        /// <summary>
        /// Returns true if ValuationPrice instances are equal
        /// </summary>
        /// <param name="other">Instance of ValuationPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValuationPrice other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Type == other.Type ||

                    Type.Equals(other.Type)
                ) &&
                (
                    Value == other.Value ||

                    Value.Equals(other.Value)
                ) &&
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) &&
                (
                    PriceDate == other.PriceDate ||

                    PriceDate.Equals(other.PriceDate)
                ) &&
                (
                    SourceOfPrice == other.SourceOfPrice ||
                    SourceOfPrice != null &&
                    SourceOfPrice.Equals(other.SourceOfPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Type.GetHashCode();

                hashCode = hashCode * 59 + Value.GetHashCode();
                if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();

                hashCode = hashCode * 59 + PriceDate.GetHashCode();
                if (SourceOfPrice != null)
                    hashCode = hashCode * 59 + SourceOfPrice.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ValuationPrice left, ValuationPrice right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ValuationPrice left, ValuationPrice right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
